// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/sSmok/platform_common/pkg/client/db.TransactorI -o transactor_i_minimock.go -n TransactorIMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/jackc/pgx/v5"
)

// TransactorIMock implements mm_db.TransactorI
type TransactorIMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcBeginTx          func(ctx context.Context, txOptions pgx.TxOptions) (t1 pgx.Tx, err error)
	funcBeginTxOrigin    string
	inspectFuncBeginTx   func(ctx context.Context, txOptions pgx.TxOptions)
	afterBeginTxCounter  uint64
	beforeBeginTxCounter uint64
	BeginTxMock          mTransactorIMockBeginTx
}

// NewTransactorIMock returns a mock for mm_db.TransactorI
func NewTransactorIMock(t minimock.Tester) *TransactorIMock {
	m := &TransactorIMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BeginTxMock = mTransactorIMockBeginTx{mock: m}
	m.BeginTxMock.callArgs = []*TransactorIMockBeginTxParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTransactorIMockBeginTx struct {
	optional           bool
	mock               *TransactorIMock
	defaultExpectation *TransactorIMockBeginTxExpectation
	expectations       []*TransactorIMockBeginTxExpectation

	callArgs []*TransactorIMockBeginTxParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TransactorIMockBeginTxExpectation specifies expectation struct of the TransactorI.BeginTx
type TransactorIMockBeginTxExpectation struct {
	mock               *TransactorIMock
	params             *TransactorIMockBeginTxParams
	paramPtrs          *TransactorIMockBeginTxParamPtrs
	expectationOrigins TransactorIMockBeginTxExpectationOrigins
	results            *TransactorIMockBeginTxResults
	returnOrigin       string
	Counter            uint64
}

// TransactorIMockBeginTxParams contains parameters of the TransactorI.BeginTx
type TransactorIMockBeginTxParams struct {
	ctx       context.Context
	txOptions pgx.TxOptions
}

// TransactorIMockBeginTxParamPtrs contains pointers to parameters of the TransactorI.BeginTx
type TransactorIMockBeginTxParamPtrs struct {
	ctx       *context.Context
	txOptions *pgx.TxOptions
}

// TransactorIMockBeginTxResults contains results of the TransactorI.BeginTx
type TransactorIMockBeginTxResults struct {
	t1  pgx.Tx
	err error
}

// TransactorIMockBeginTxOrigins contains origins of expectations of the TransactorI.BeginTx
type TransactorIMockBeginTxExpectationOrigins struct {
	origin          string
	originCtx       string
	originTxOptions string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmBeginTx *mTransactorIMockBeginTx) Optional() *mTransactorIMockBeginTx {
	mmBeginTx.optional = true
	return mmBeginTx
}

// Expect sets up expected params for TransactorI.BeginTx
func (mmBeginTx *mTransactorIMockBeginTx) Expect(ctx context.Context, txOptions pgx.TxOptions) *mTransactorIMockBeginTx {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by Set")
	}

	if mmBeginTx.defaultExpectation == nil {
		mmBeginTx.defaultExpectation = &TransactorIMockBeginTxExpectation{}
	}

	if mmBeginTx.defaultExpectation.paramPtrs != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by ExpectParams functions")
	}

	mmBeginTx.defaultExpectation.params = &TransactorIMockBeginTxParams{ctx, txOptions}
	mmBeginTx.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmBeginTx.expectations {
		if minimock.Equal(e.params, mmBeginTx.defaultExpectation.params) {
			mmBeginTx.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBeginTx.defaultExpectation.params)
		}
	}

	return mmBeginTx
}

// ExpectCtxParam1 sets up expected param ctx for TransactorI.BeginTx
func (mmBeginTx *mTransactorIMockBeginTx) ExpectCtxParam1(ctx context.Context) *mTransactorIMockBeginTx {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by Set")
	}

	if mmBeginTx.defaultExpectation == nil {
		mmBeginTx.defaultExpectation = &TransactorIMockBeginTxExpectation{}
	}

	if mmBeginTx.defaultExpectation.params != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by Expect")
	}

	if mmBeginTx.defaultExpectation.paramPtrs == nil {
		mmBeginTx.defaultExpectation.paramPtrs = &TransactorIMockBeginTxParamPtrs{}
	}
	mmBeginTx.defaultExpectation.paramPtrs.ctx = &ctx
	mmBeginTx.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmBeginTx
}

// ExpectTxOptionsParam2 sets up expected param txOptions for TransactorI.BeginTx
func (mmBeginTx *mTransactorIMockBeginTx) ExpectTxOptionsParam2(txOptions pgx.TxOptions) *mTransactorIMockBeginTx {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by Set")
	}

	if mmBeginTx.defaultExpectation == nil {
		mmBeginTx.defaultExpectation = &TransactorIMockBeginTxExpectation{}
	}

	if mmBeginTx.defaultExpectation.params != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by Expect")
	}

	if mmBeginTx.defaultExpectation.paramPtrs == nil {
		mmBeginTx.defaultExpectation.paramPtrs = &TransactorIMockBeginTxParamPtrs{}
	}
	mmBeginTx.defaultExpectation.paramPtrs.txOptions = &txOptions
	mmBeginTx.defaultExpectation.expectationOrigins.originTxOptions = minimock.CallerInfo(1)

	return mmBeginTx
}

// Inspect accepts an inspector function that has same arguments as the TransactorI.BeginTx
func (mmBeginTx *mTransactorIMockBeginTx) Inspect(f func(ctx context.Context, txOptions pgx.TxOptions)) *mTransactorIMockBeginTx {
	if mmBeginTx.mock.inspectFuncBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("Inspect function is already set for TransactorIMock.BeginTx")
	}

	mmBeginTx.mock.inspectFuncBeginTx = f

	return mmBeginTx
}

// Return sets up results that will be returned by TransactorI.BeginTx
func (mmBeginTx *mTransactorIMockBeginTx) Return(t1 pgx.Tx, err error) *TransactorIMock {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by Set")
	}

	if mmBeginTx.defaultExpectation == nil {
		mmBeginTx.defaultExpectation = &TransactorIMockBeginTxExpectation{mock: mmBeginTx.mock}
	}
	mmBeginTx.defaultExpectation.results = &TransactorIMockBeginTxResults{t1, err}
	mmBeginTx.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmBeginTx.mock
}

// Set uses given function f to mock the TransactorI.BeginTx method
func (mmBeginTx *mTransactorIMockBeginTx) Set(f func(ctx context.Context, txOptions pgx.TxOptions) (t1 pgx.Tx, err error)) *TransactorIMock {
	if mmBeginTx.defaultExpectation != nil {
		mmBeginTx.mock.t.Fatalf("Default expectation is already set for the TransactorI.BeginTx method")
	}

	if len(mmBeginTx.expectations) > 0 {
		mmBeginTx.mock.t.Fatalf("Some expectations are already set for the TransactorI.BeginTx method")
	}

	mmBeginTx.mock.funcBeginTx = f
	mmBeginTx.mock.funcBeginTxOrigin = minimock.CallerInfo(1)
	return mmBeginTx.mock
}

// When sets expectation for the TransactorI.BeginTx which will trigger the result defined by the following
// Then helper
func (mmBeginTx *mTransactorIMockBeginTx) When(ctx context.Context, txOptions pgx.TxOptions) *TransactorIMockBeginTxExpectation {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("TransactorIMock.BeginTx mock is already set by Set")
	}

	expectation := &TransactorIMockBeginTxExpectation{
		mock:               mmBeginTx.mock,
		params:             &TransactorIMockBeginTxParams{ctx, txOptions},
		expectationOrigins: TransactorIMockBeginTxExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmBeginTx.expectations = append(mmBeginTx.expectations, expectation)
	return expectation
}

// Then sets up TransactorI.BeginTx return parameters for the expectation previously defined by the When method
func (e *TransactorIMockBeginTxExpectation) Then(t1 pgx.Tx, err error) *TransactorIMock {
	e.results = &TransactorIMockBeginTxResults{t1, err}
	return e.mock
}

// Times sets number of times TransactorI.BeginTx should be invoked
func (mmBeginTx *mTransactorIMockBeginTx) Times(n uint64) *mTransactorIMockBeginTx {
	if n == 0 {
		mmBeginTx.mock.t.Fatalf("Times of TransactorIMock.BeginTx mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmBeginTx.expectedInvocations, n)
	mmBeginTx.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmBeginTx
}

func (mmBeginTx *mTransactorIMockBeginTx) invocationsDone() bool {
	if len(mmBeginTx.expectations) == 0 && mmBeginTx.defaultExpectation == nil && mmBeginTx.mock.funcBeginTx == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmBeginTx.mock.afterBeginTxCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmBeginTx.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// BeginTx implements mm_db.TransactorI
func (mmBeginTx *TransactorIMock) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (t1 pgx.Tx, err error) {
	mm_atomic.AddUint64(&mmBeginTx.beforeBeginTxCounter, 1)
	defer mm_atomic.AddUint64(&mmBeginTx.afterBeginTxCounter, 1)

	mmBeginTx.t.Helper()

	if mmBeginTx.inspectFuncBeginTx != nil {
		mmBeginTx.inspectFuncBeginTx(ctx, txOptions)
	}

	mm_params := TransactorIMockBeginTxParams{ctx, txOptions}

	// Record call args
	mmBeginTx.BeginTxMock.mutex.Lock()
	mmBeginTx.BeginTxMock.callArgs = append(mmBeginTx.BeginTxMock.callArgs, &mm_params)
	mmBeginTx.BeginTxMock.mutex.Unlock()

	for _, e := range mmBeginTx.BeginTxMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.t1, e.results.err
		}
	}

	if mmBeginTx.BeginTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBeginTx.BeginTxMock.defaultExpectation.Counter, 1)
		mm_want := mmBeginTx.BeginTxMock.defaultExpectation.params
		mm_want_ptrs := mmBeginTx.BeginTxMock.defaultExpectation.paramPtrs

		mm_got := TransactorIMockBeginTxParams{ctx, txOptions}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmBeginTx.t.Errorf("TransactorIMock.BeginTx got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmBeginTx.BeginTxMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.txOptions != nil && !minimock.Equal(*mm_want_ptrs.txOptions, mm_got.txOptions) {
				mmBeginTx.t.Errorf("TransactorIMock.BeginTx got unexpected parameter txOptions, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmBeginTx.BeginTxMock.defaultExpectation.expectationOrigins.originTxOptions, *mm_want_ptrs.txOptions, mm_got.txOptions, minimock.Diff(*mm_want_ptrs.txOptions, mm_got.txOptions))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBeginTx.t.Errorf("TransactorIMock.BeginTx got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmBeginTx.BeginTxMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBeginTx.BeginTxMock.defaultExpectation.results
		if mm_results == nil {
			mmBeginTx.t.Fatal("No results are set for the TransactorIMock.BeginTx")
		}
		return (*mm_results).t1, (*mm_results).err
	}
	if mmBeginTx.funcBeginTx != nil {
		return mmBeginTx.funcBeginTx(ctx, txOptions)
	}
	mmBeginTx.t.Fatalf("Unexpected call to TransactorIMock.BeginTx. %v %v", ctx, txOptions)
	return
}

// BeginTxAfterCounter returns a count of finished TransactorIMock.BeginTx invocations
func (mmBeginTx *TransactorIMock) BeginTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBeginTx.afterBeginTxCounter)
}

// BeginTxBeforeCounter returns a count of TransactorIMock.BeginTx invocations
func (mmBeginTx *TransactorIMock) BeginTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBeginTx.beforeBeginTxCounter)
}

// Calls returns a list of arguments used in each call to TransactorIMock.BeginTx.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBeginTx *mTransactorIMockBeginTx) Calls() []*TransactorIMockBeginTxParams {
	mmBeginTx.mutex.RLock()

	argCopy := make([]*TransactorIMockBeginTxParams, len(mmBeginTx.callArgs))
	copy(argCopy, mmBeginTx.callArgs)

	mmBeginTx.mutex.RUnlock()

	return argCopy
}

// MinimockBeginTxDone returns true if the count of the BeginTx invocations corresponds
// the number of defined expectations
func (m *TransactorIMock) MinimockBeginTxDone() bool {
	if m.BeginTxMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.BeginTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.BeginTxMock.invocationsDone()
}

// MinimockBeginTxInspect logs each unmet expectation
func (m *TransactorIMock) MinimockBeginTxInspect() {
	for _, e := range m.BeginTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactorIMock.BeginTx at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterBeginTxCounter := mm_atomic.LoadUint64(&m.afterBeginTxCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.BeginTxMock.defaultExpectation != nil && afterBeginTxCounter < 1 {
		if m.BeginTxMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TransactorIMock.BeginTx at\n%s", m.BeginTxMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TransactorIMock.BeginTx at\n%s with params: %#v", m.BeginTxMock.defaultExpectation.expectationOrigins.origin, *m.BeginTxMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBeginTx != nil && afterBeginTxCounter < 1 {
		m.t.Errorf("Expected call to TransactorIMock.BeginTx at\n%s", m.funcBeginTxOrigin)
	}

	if !m.BeginTxMock.invocationsDone() && afterBeginTxCounter > 0 {
		m.t.Errorf("Expected %d calls to TransactorIMock.BeginTx at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.BeginTxMock.expectedInvocations), m.BeginTxMock.expectedInvocationsOrigin, afterBeginTxCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransactorIMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockBeginTxInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransactorIMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransactorIMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBeginTxDone()
}
